"""Reads the frame generated from best_selection.py and plots the results with error bars."""
import os
import gc
import sys
import pdb
import json
import argparse
import platform
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection as model_selection
from setup import setup
from sklearn.metrics import recall_score, accuracy_score

#Gets enviroment variables and appends needed custom packages
LOFAR_FOLDER, OUTPUT_DIR, RAW_DATA = setup()

import my_models
from data_analysis.model_evaluation import novelty_analysis
import data_analysis.utils.utils as da_utils

#COLORS = (black, gray, brown) in hex code
COLORS = ('blue', 'green', 'red', 'magenta', 'yellow')
WIDTH = 0.1

parser = argparse.ArgumentParser(description='Reads all the data_comparison DataFrames generated by the script with the same name and selects the best models per lofar parameter')
parser.add_argument('novelty', help='Novelty to be used as parameter')
parser.add_argument('--format', help='Format to read and save the data frame: csv or xlsx.\nDefaults to xlsx', default='csv', type=str, choices=['csv', 'xlsx'])

args = parser.parse_args()
FORMAT = args.format
NOVELTY = args.novelty

best_models = pd.read_csv(os.path.join(OUTPUT_DIR, 'best_models_' + NOVELTY + '.csv'), header=[0,1], index_col=[0,1])

fft_pts = [1024,2048,4096, 8192]
decimations = [0,3,5]
positions = ['First', 'Second', 'Third', 'Fourth', 'Fifth']
COLORS_PER_POSITION = {position: color for position, color in zip(positions, COLORS)}
rows = ['_'.join([position, color]) for position, color in zip(positions, COLORS)]

def _error_line(axis, x, y, error, width, color):
    x_min = x-width/2
    x_max = x+width/2
    axis.scatter(x, y, c=color)
    axis.hlines(y-error, x_min, x_max, colors=color)
    axis.hlines(y+error, x_min, x_max, colors=color)
    axis.vlines(x, y-error, y+error, colors=color)

def error_lines(axis, x, y, error, width, color):
    for i in range(len(x)):
        _error_line(axis, x[i], y[i],error[i], width, color)
    return axis

for fft in fft_pts:
    fig, axis = plt.subplots()
    cell_text = list()
    for position in positions:
        cell_text.append(list(best_models.loc[fft, (position, 'Model')].values))
        error_lines(axis, [0,1,2], best_models.loc[fft, (position, 'Average')].values,
                    best_models.loc[fft, (position, 'Error')].values, WIDTH, COLORS_PER_POSITION[position])
    plt.grid(color='k', alpha=0.5, linestyle='dashed', linewidth=0.5)
    axis.set_ylabel('NOC AUC')
    axis.set_title(f'{fft} FFT pts {NOVELTY}')
    axis.set_xticks([])
    row_labels = COLORS
    axis.table(cellText=cell_text,
                      rowLabels=row_labels,
                      colLabels=decimations,
                      loc='bottom')
    fig.savefig(os.path.join(OUTPUT_DIR, f'plot_best_selection_{fft}_fft_pts_{NOVELTY}.png'), dpi=200, format='png', bbox_inches="tight")