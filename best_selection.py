"""Reads all the data_comparison DataFrames generated by the script with the same name and selects the best models per lofar parameter
with the format:

    fft_pts decimation | first | second | third

The columns first second and third simbolizes the decrescent order of best metric."""

import os
import argparse
import numpy as np
import pandas as pd
from setup import setup

#Gets enviroment variables and appends needed custom packages
LOFAR_FOLDER, OUTPUT_DIR, RAW_DATA = setup()

import data_analysis.utils.utils as da_utils

parser = argparse.ArgumentParser(description='Reads all the data_comparison DataFrames generated by the script with the same name and selects the best models per lofar parameter')
parser.add_argument('--format', help='Format to save the data frame: csv or xlsx.\nDefaults to xlsx', default='csv', type=str, choices=['csv', 'xlsx'])

FORMAT = parser.parse_args().format

#COLORS = (black, green, red, yellow, blue, gray, pink, orange, brown, cyan) in hex code
COLORS = ('#000000', '#008000', '#FF0000', '#FFFF00', '#0000FF', '#808080', '#FF00FF', '#FFA500', '#A52A2A', '#00FFFF')

fft_pts_index = list()
decimation_index = list()
best_data = list()

lofar_params_folders = np.sort(os.listdir(OUTPUT_DIR))
for lofar_params_folder in lofar_params_folders:
    current_dir = os.path.join(OUTPUT_DIR, lofar_params_folder)
    
    if not os.path.isdir(current_dir):
        continue

    splitted_name = lofar_params_folder.split('_')
    fft_pts = int(splitted_name[2])
    decimation = int(splitted_name[-2])

    fft_pts_index.append(fft_pts)
    decimation_index.append(decimation)
    comparison_frame = pd.read_csv(os.path.join(current_dir, 'comparison_frame.csv'), header=[0,1], index_col=[0,1])
    best_frame = comparison_frame.loc[:,'Novidade'].nlargest(3, 'Média')     #Gets the best 3 models
    best_avg = list()
    best_error = list()
    for avg, error in zip( best_frame.loc[:,'Média'].values,  best_frame.loc[:,'Erro'].values):
        error ,decimals = da_utils.around(error)
        avg = round(avg, decimals)
        best_avg.append(avg)
        best_error.append(error)

    best_models = list()
    for name, neurons in best_frame.index:
        best_models.append('_'.join((str(name), str(neurons))))

    best_models_values = list()
    for model, avg, error, in zip(best_models, best_avg, best_error):
        best_models_values.append(model)
        best_models_values.append(avg)
        best_models_values.append(error)

    best_data.append(best_models_values)

    current_dir, _ = os.path.split(current_dir)

index = pd.MultiIndex.from_arrays([fft_pts_index, decimation_index], names=('Pts', 'Decimação'))
columns = pd.MultiIndex.from_product([('Primeiro', 'Segundo', 'Terceiro'), ('Modelo', 'Média', 'Erro')])
data = np.stack(tuple(best_data), axis=0)
best_frame = pd.DataFrame(data, index=index, columns=columns)
if FORMAT == 'csv':
    best_frame.to_csv(os.path.join(OUTPUT_DIR, 'best_models_all_novelties.csv'))
elif FORMAT == 'xlsx':
    best_frame.to_excel(os.path.join(OUTPUT_DIR, 'best_models_all_novelties.xlsx'))
else:
    raise ValueError(f'Uknown format type: {FORMAT}')