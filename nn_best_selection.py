"""Reads all the data_comparison DataFrames generated by the script with the same name and selects the best models per lofar parameter
with the format:

    fft_pts decimation | first | second | third

The columns first second and third simbolizes the decrescent order of best metric."""

import os
import gc
import json
import argparse

import pandas as pd
import numpy as np

from config import setup
#Gets enviroment variables and appends needed custom packages
setup()
from data_analysis.utils import utils

parser = argparse.ArgumentParser(description='Reads all the data_comparison DataFrames generated by the script with the same name and selects the best models per lofar parameter')
parser.add_argument('dir', help='Directory generated from nn_kfold.py with the results and training history')
parser.add_argument('novelty', help='Novelty to be used as parameter')
parser.add_argument('--format', help='Format to read and save the data frame: csv or xlsx.\nDefaults to xlsx', default='csv', type=str, choices=['csv', 'xlsx'])

args = parser.parse_args()
output_dir = args.dir
novelty_class = args.novelty
file_format = args.format
FILE_NAME = 'noc_comparison_frame'

#COLORS = (black, green, red, yellow, blue, gray, pink, orange, brown, cyan) in hex code
COLORS = ('#000000', '#008000', '#FF0000', '#FFFF00', '#0000FF', '#808080', '#FF00FF', '#FFA500', '#A52A2A', '#00FFFF')

fft_pts_index = list()
decimation_index = list()
best_data = list()

lofar_params_folders = np.sort(os.listdir(output_dir))
for lofar_params_folder in lofar_params_folders:
    current_dir = os.path.join(output_dir, lofar_params_folder)
    
    if not os.path.isdir(current_dir):
        continue

    splitted = lofar_params_folder.split('_')
    fft_pts = splitted[2]
    decimation = splitted[5]
    pca = splitted[-3]
    bins = splitted[-1]

    fft_pts_index.append(fft_pts)
    decimation_index.append(decimation)
    if file_format == 'csv':
        comparison_frame = pd.read_csv(os.path.join(current_dir, FILE_NAME+'.csv'), header=[0,1], index_col=[0,1])
    elif file_format == 'xlsx':
        comparison_frame = pd.read_excel(os.path.join(current_dir, FILE_NAME+'.xlsx'), header=[0,1], index_col=[0,1])
    else:
        raise ValueError(f'Unknown format type: {file_format}')

    best_frame = comparison_frame.loc[:, novelty_class].nlargest(5, 'Average')     #Gets the best 3 models
    best_avg = list()
    best_error = list()
    for avg, error in zip(best_frame.loc[:,'Average'].values,  best_frame.loc[:,'Error'].values):
        error ,decimals = utils.around(error)
        avg = round(avg, decimals)
        best_avg.append(avg)
        best_error.append(error)

    best_models = list()
    for name, neurons in best_frame.index:
        best_models.append('_'.join((str(name), str(neurons))))

    best_models_values = list()
    for model, avg, error, in zip(best_models, best_avg, best_error):
        best_models_values.append(model)
        best_models_values.append(avg)
        best_models_values.append(error)

    best_data.append(best_models_values)

    current_dir, _ = os.path.split(current_dir)

index = pd.MultiIndex.from_arrays([fft_pts_index, decimation_index], names=('Pts', 'Decimation'))
columns = pd.MultiIndex.from_product([('First', 'Second', 'Third', 'Fourth', 'Fifth'), ('Model', 'Average', 'Error')])
data = np.stack(tuple(best_data), axis=0)
best_frame = pd.DataFrame(data, index=index, columns=columns)

filename = f'best_models_{novelty_class}_per_noc'
if file_format == 'csv':
    best_frame.to_csv(os.path.join(output_dir, filename+'.csv'))
elif file_format == 'xlsx':
    best_frame.to_excel(os.path.join(output_dir, filename+'.xlsx'))
else:
    raise ValueError(f'Unknown format type: {file_format}')

print('Finished')